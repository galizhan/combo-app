{
  "version": 3,
  "sources": ["../../../../app/components/Search.jsx"],
  "sourcesContent": ["import {Link, Form, useParams, useFetcher, useFetchers} from '@remix-run/react';\nimport {Image, Money, Pagination} from '@shopify/hydrogen';\nimport React, {useRef, useEffect} from 'react';\n\nexport const NO_PREDICTIVE_SEARCH_RESULTS = [\n  {type: 'queries', items: []},\n  {type: 'products', items: []},\n  {type: 'collections', items: []},\n  {type: 'pages', items: []},\n  {type: 'articles', items: []},\n];\n\nexport function SearchForm({searchTerm}) {\n  const inputRef = useRef(null);\n\n  // focus the input when cmd+k is pressed\n  useEffect(() => {\n    function handleKeyDown(event) {\n      if (event.key === 'k' && event.metaKey) {\n        event.preventDefault();\n        inputRef.current?.focus();\n      }\n\n      if (event.key === 'Escape') {\n        inputRef.current?.blur();\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, []);\n\n  return (\n    <Form method=\"get\">\n      <input\n        defaultValue={searchTerm}\n        name=\"q\"\n        placeholder=\"Search\u2026\"\n        ref={inputRef}\n        type=\"search\"\n      />\n      &nbsp;\n      <button type=\"submit\">Search</button>\n    </Form>\n  );\n}\n\nexport function SearchResults({results}) {\n  if (!results) {\n    return null;\n  }\n  const keys = Object.keys(results);\n  return (\n    <div>\n      {results &&\n        keys.map((type) => {\n          const resourceResults = results[type];\n\n          if (resourceResults.nodes[0]?.__typename === 'Page') {\n            const pageResults = resourceResults;\n            return resourceResults.nodes.length ? (\n              <SearchResultPageGrid key=\"pages\" pages={pageResults} />\n            ) : null;\n          }\n\n          if (resourceResults.nodes[0]?.__typename === 'Product') {\n            const productResults = resourceResults;\n            return resourceResults.nodes.length ? (\n              <SearchResultsProductsGrid\n                key=\"products\"\n                products={productResults}\n              />\n            ) : null;\n          }\n\n          if (resourceResults.nodes[0]?.__typename === 'Article') {\n            const articleResults = resourceResults;\n            return resourceResults.nodes.length ? (\n              <SearchResultArticleGrid\n                key=\"articles\"\n                articles={articleResults}\n              />\n            ) : null;\n          }\n\n          return null;\n        })}\n    </div>\n  );\n}\n\nfunction SearchResultsProductsGrid({products}) {\n  return (\n    <div className=\"search-result\">\n      <h3>Products</h3>\n      <Pagination connection={products}>\n        {({nodes, isLoading, NextLink, PreviousLink}) => {\n          const itemsMarkup = nodes.map((product) => (\n            <div className=\"search-results-item\" key={product.id}>\n              <Link prefetch=\"intent\" to={`/products/${product.handle}`}>\n                <span>{product.title}</span>\n              </Link>\n            </div>\n          ));\n          return (\n            <div>\n              <div>\n                <PreviousLink>\n                  {isLoading ? 'Loading...' : <span>\u2191 Load previous</span>}\n                </PreviousLink>\n              </div>\n              <div>\n                {itemsMarkup}\n                <br />\n              </div>\n              <div>\n                <NextLink>\n                  {isLoading ? 'Loading...' : <span>Load more \u2193</span>}\n                </NextLink>\n              </div>\n            </div>\n          );\n        }}\n      </Pagination>\n      <br />\n    </div>\n  );\n}\n\nfunction SearchResultPageGrid({pages}) {\n  return (\n    <div className=\"search-result\">\n      <h2>Pages</h2>\n      <div>\n        {pages?.nodes?.map((page) => (\n          <div className=\"search-results-item\" key={page.id}>\n            <Link prefetch=\"intent\" to={`/pages/${page.handle}`}>\n              {page.title}\n            </Link>\n          </div>\n        ))}\n      </div>\n      <br />\n    </div>\n  );\n}\n\nfunction SearchResultArticleGrid({articles}) {\n  return (\n    <div className=\"search-result\">\n      <h2>Articles</h2>\n      <div>\n        {articles?.nodes?.map((article) => (\n          <div className=\"search-results-item\" key={article.id}>\n            <Link prefetch=\"intent\" to={`/blog/${article.handle}`}>\n              {article.title}\n            </Link>\n          </div>\n        ))}\n      </div>\n      <br />\n    </div>\n  );\n}\n\nexport function NoSearchResults() {\n  return <p>No results, try a different search.</p>;\n}\n\n/**\n *  Search form component that posts search requests to the `/search` route\n **/\nexport function PredictiveSearchForm({\n  action,\n  children,\n  className = 'predictive-search-form',\n  method = 'POST',\n  ...props\n}) {\n  const params = useParams();\n  const fetcher = useFetcher();\n  const inputRef = useRef(null);\n\n  function fetchResults(event) {\n    const searchAction = action ?? '/api/predictive-search';\n    const localizedAction = params.locale\n      ? `/${params.locale}${searchAction}`\n      : searchAction;\n    const newSearchTerm = event.target.value || '';\n    fetcher.submit(\n      {q: newSearchTerm, limit: '6'},\n      {method, action: localizedAction},\n    );\n  }\n\n  // ensure the passed input has a type of search, because SearchResults\n  // will select the element based on the input\n  useEffect(() => {\n    inputRef?.current?.setAttribute('type', 'search');\n  }, []);\n\n  return (\n    <fetcher.Form\n      {...props}\n      className={className}\n      onSubmit={(event) => {\n        event.preventDefault();\n        event.stopPropagation();\n        if (!inputRef?.current || inputRef.current.value === '') {\n          return;\n        }\n        inputRef.current.blur();\n      }}\n    >\n      {children({fetchResults, inputRef, fetcher})}\n    </fetcher.Form>\n  );\n}\n\nexport function PredictiveSearchResults() {\n  const {results, totalResults, searchInputRef, searchTerm} =\n    usePredictiveSearch();\n\n  function goToSearchResult(event) {\n    if (!searchInputRef.current) return;\n    searchInputRef.current.blur();\n    searchInputRef.current.value = '';\n    // close the aside\n    window.location.href = event.currentTarget.href;\n  }\n\n  if (!totalResults) {\n    return <NoPredictiveSearchResults searchTerm={searchTerm} />;\n  }\n  return (\n    <div className=\"predictive-search-results\">\n      <div>\n        {results.map(({type, items}) => (\n          <PredictiveSearchResult\n            goToSearchResult={goToSearchResult}\n            items={items}\n            key={type}\n            searchTerm={searchTerm}\n            type={type}\n          />\n        ))}\n      </div>\n      {/* view all results /search?q=term */}\n      {searchTerm.current && (\n        <Link onClick={goToSearchResult} to={`/search?q=${searchTerm.current}`}>\n          <p>\n            View all results for <q>{searchTerm.current}</q>\n            &nbsp; \u2192\n          </p>\n        </Link>\n      )}\n    </div>\n  );\n}\n\nfunction NoPredictiveSearchResults({searchTerm}) {\n  if (!searchTerm.current) {\n    return null;\n  }\n  return (\n    <p>\n      No results found for <q>{searchTerm.current}</q>\n    </p>\n  );\n}\n\nfunction PredictiveSearchResult({goToSearchResult, items, searchTerm, type}) {\n  const isSuggestions = type === 'queries';\n  const categoryUrl = `/search?q=${\n    searchTerm.current\n  }&type=${pluralToSingularSearchType(type)}`;\n\n  return (\n    <div className=\"predictive-search-result\" key={type}>\n      <Link prefetch=\"intent\" to={categoryUrl} onClick={goToSearchResult}>\n        <h5>{isSuggestions ? 'Suggestions' : type}</h5>\n      </Link>\n      <ul>\n        {items.map((item) => (\n          <SearchResultItem\n            goToSearchResult={goToSearchResult}\n            item={item}\n            key={item.id}\n          />\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nfunction SearchResultItem({goToSearchResult, item}) {\n  return (\n    <li className=\"predictive-search-result-item\" key={item.id}>\n      <Link onClick={goToSearchResult} to={item.url}>\n        {item.image?.url && (\n          <Image\n            alt={item.image.altText ?? ''}\n            src={item.image.url}\n            width={50}\n            height={50}\n          />\n        )}\n        <div>\n          {item.styledTitle ? (\n            <div\n              dangerouslySetInnerHTML={{\n                __html: item.styledTitle,\n              }}\n            />\n          ) : (\n            <span>{item.title}</span>\n          )}\n          {item?.price && (\n            <small>\n              <Money data={item.price} />\n            </small>\n          )}\n        </div>\n      </Link>\n    </li>\n  );\n}\n\nfunction usePredictiveSearch() {\n  const fetchers = useFetchers();\n  const searchTerm = useRef('');\n  const searchInputRef = useRef(null);\n  const searchFetcher = fetchers.find((fetcher) => fetcher.data?.searchResults);\n\n  if (searchFetcher?.state === 'loading') {\n    searchTerm.current = searchFetcher.formData?.get('q') || '';\n  }\n\n  const search = searchFetcher?.data?.searchResults || {\n    results: NO_PREDICTIVE_SEARCH_RESULTS,\n    totalResults: 0,\n  };\n\n  // capture the search input element as a ref\n  useEffect(() => {\n    if (searchInputRef.current) return;\n    searchInputRef.current = document.querySelector('input[type=\"search\"]');\n  }, []);\n\n  return {...search, searchInputRef, searchTerm};\n}\n\n/**\n * Converts a plural search type to a singular search type\n * @param type - The plural search type\n * @returns The singular search type\n *\n * @example\n * ```ts\n * pluralToSingularSearchType('articles') // => 'ARTICLE'\n * pluralToSingularSearchType(['articles', 'products']) // => 'ARTICLE,PRODUCT'\n * ```\n */\nfunction pluralToSingularSearchType(type) {\n  const plural = {\n    articles: 'ARTICLE',\n    collections: 'COLLECTION',\n    pages: 'PAGE',\n    products: 'PRODUCT',\n    queries: 'QUERY',\n  };\n\n  if (typeof type === 'string') {\n    return plural[type];\n  }\n\n  return type.map((t) => plural[t]).join(',');\n}\n"],
  "mappings": "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",
  "names": ["import_react", "import_jsx_runtime", "SearchForm", "searchTerm", "inputRef", "handleKeyDown", "event", "Form", "SearchResults", "results", "keys", "type", "resourceResults", "pageResults", "SearchResultPageGrid", "productResults", "SearchResultsProductsGrid", "articleResults", "SearchResultArticleGrid", "products", "vt", "nodes", "isLoading", "NextLink", "PreviousLink", "itemsMarkup", "product", "Link", "pages", "page", "articles", "article", "NoSearchResults"]
}
