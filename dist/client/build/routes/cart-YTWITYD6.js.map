{
  "version": 3,
  "sources": ["../../../../app/routes/cart.jsx"],
  "sourcesContent": ["import {Await, useMatches} from '@remix-run/react';\nimport {Suspense} from 'react';\nimport {CartForm} from '@shopify/hydrogen';\nimport {json} from '@shopify/remix-oxygen';\nimport {CartMain} from '~/components/Cart';\n\nexport const meta = () => {\n  return [{title: `Hydrogen | Cart`}];\n};\n\nexport async function action({request, context}) {\n  const {session, cart} = context;\n\n  const [formData, customerAccessToken] = await Promise.all([\n    request.formData(),\n    session.get('customerAccessToken'),\n  ]);\n\n  const {action, inputs} = CartForm.getFormInput(formData);\n\n  if (!action) {\n    throw new Error('No action provided');\n  }\n\n  let status = 200;\n  let result;\n\n  switch (action) {\n    case CartForm.ACTIONS.LinesAdd:\n      result = await cart.addLines(inputs.lines);\n      break;\n    case CartForm.ACTIONS.LinesUpdate:\n      result = await cart.updateLines(inputs.lines);\n      break;\n    case CartForm.ACTIONS.LinesRemove:\n      result = await cart.removeLines(inputs.lineIds);\n      break;\n    case CartForm.ACTIONS.DiscountCodesUpdate: {\n      const formDiscountCode = inputs.discountCode;\n\n      // User inputted discount code\n      const discountCodes = formDiscountCode ? [formDiscountCode] : [];\n\n      // Combine discount codes already applied on cart\n      discountCodes.push(...inputs.discountCodes);\n\n      result = await cart.updateDiscountCodes(discountCodes);\n      break;\n    }\n    case CartForm.ACTIONS.BuyerIdentityUpdate: {\n      result = await cart.updateBuyerIdentity({\n        ...inputs.buyerIdentity,\n        customerAccessToken: customerAccessToken?.accessToken,\n      });\n      break;\n    }\n    default:\n      throw new Error(`${action} cart action is not defined`);\n  }\n\n  const cartId = result.cart.id;\n  const headers = cart.setCartId(result.cart.id);\n  const {cart: cartResult, errors} = result;\n\n  const redirectTo = formData.get('redirectTo') ?? null;\n  if (typeof redirectTo === 'string') {\n    status = 303;\n    headers.set('Location', redirectTo);\n  }\n\n  return json(\n    {\n      cart: cartResult,\n      errors,\n      analytics: {\n        cartId,\n      },\n    },\n    {status, headers},\n  );\n}\n\nexport default function Cart() {\n  const [root] = useMatches();\n  const cart = root.data?.cart;\n\n  return (\n    <div className=\"cart\">\n      <h1>Cart</h1>\n      <Suspense fallback={<p>Loading cart ...</p>}>\n        <Await errorElement={<div>An error occurred</div>} resolve={cart}>\n          {(cart) => {\n            return <CartMain layout=\"page\" cart={cart} />;\n          }}\n        </Await>\n      </Suspense>\n    </div>\n  );\n}\n"],
  "mappings": "sQACA,IAAAA,EAAuB,OAsFnB,IAAAC,EAAA,OAjFSC,EAAO,IACX,CAAC,CAAC,MAAO,iBAAiB,CAAC,EA2ErB,SAARC,GAAwB,CAC7B,GAAM,CAACC,CAAI,EAAIC,EAAW,EACpBC,EAAOF,EAAK,MAAM,KAExB,SACE,QAAC,OAAI,UAAU,OACb,oBAAC,MAAG,gBAAI,KACR,OAAC,YAAS,YAAU,OAAC,KAAE,4BAAgB,EACrC,mBAACG,EAAA,CAAM,gBAAc,OAAC,OAAI,6BAAiB,EAAQ,QAASD,EACzD,SAACA,MACO,OAACE,EAAA,CAAS,OAAO,OAAO,KAAMF,EAAM,EAE/C,EACF,GACF,CAEJ",
  "names": ["import_react", "import_jsx_runtime", "meta", "Cart", "root", "useMatches", "cart", "Await", "CartMain"]
}
