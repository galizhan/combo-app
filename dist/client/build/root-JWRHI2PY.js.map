{
  "version": 3,
  "sources": ["../../../app/components/Layout.jsx", "../../../app/root.jsx"],
  "sourcesContent": ["import {Await} from '@remix-run/react';\nimport {Suspense} from 'react';\nimport {Aside} from '~/components/Aside';\nimport {Footer} from '~/components/Footer';\nimport {Header, HeaderMenu} from '~/components/Header';\nimport {CartMain} from '~/components/Cart';\nimport {\n  PredictiveSearchForm,\n  PredictiveSearchResults,\n} from '~/components/Search';\n\nexport function Layout({cart, children = null, footer, header, isLoggedIn}) {\n  return (\n    <>\n      {/*<CartAside cart={cart} />*/}\n      {/*<SearchAside />*/}\n      {/*<MobileMenuAside menu={header.menu} />*/}\n      {/*<Header header={header} cart={cart} isLoggedIn={isLoggedIn} />*/}\n      <main>{children}</main>\n      {/*<Suspense>*/}\n      {/*  <Await resolve={footer}>*/}\n      {/*    {(footer) => <Footer menu={footer.menu} />}*/}\n      {/*  </Await>*/}\n      {/*</Suspense>*/}\n    </>\n  );\n}\n\nfunction CartAside({cart}) {\n  return (\n    <Aside id=\"cart-aside\" heading=\"CART\">\n      <Suspense fallback={<p>Loading cart ...</p>}>\n        <Await resolve={cart}>\n          {(cart) => {\n            return <CartMain cart={cart} layout=\"aside\" />;\n          }}\n        </Await>\n      </Suspense>\n    </Aside>\n  );\n}\n\nfunction SearchAside() {\n  return (\n    <Aside id=\"search-aside\" heading=\"SEARCH\">\n      <div className=\"predictive-search\">\n        <br />\n        <PredictiveSearchForm>\n          {({fetchResults, inputRef}) => (\n            <div>\n              <input\n                name=\"q\"\n                onChange={fetchResults}\n                onFocus={fetchResults}\n                placeholder=\"Search\"\n                ref={inputRef}\n                type=\"search\"\n              />\n              &nbsp;\n              <button type=\"submit\">Search</button>\n            </div>\n          )}\n        </PredictiveSearchForm>\n        <PredictiveSearchResults />\n      </div>\n    </Aside>\n  );\n}\n\nfunction MobileMenuAside({menu}) {\n  return (\n    <Aside id=\"mobile-menu-aside\" heading=\"MENU\">\n      <HeaderMenu menu={menu} viewport=\"mobile\" />\n    </Aside>\n  );\n}\n", "import { useNonce } from '@shopify/hydrogen';\nimport { defer } from '@shopify/remix-oxygen';\nimport {\n  Links,\n  Meta,\n  Outlet,\n  Scripts,\n  LiveReload,\n  useMatches,\n  useRouteError,\n  useLoaderData,\n  ScrollRestoration,\n  isRouteErrorResponse } from\n'@remix-run/react';\nimport favicon from '../public/favicon.svg';\nimport resetStyles from './styles/reset.css';\nimport appStyles from './styles/app.css';\nimport { Layout } from '~/components/Layout';\nimport tailwindCss from './styles/tailwind.css';\n\n// This is important to avoid re-fetching root queries on sub-navigations\nexport const shouldRevalidate = ({ formMethod, currentUrl, nextUrl }) => {\n  // revalidate when a mutation is performed e.g add to cart, login...\n  if (formMethod && formMethod !== 'GET') {\n    return true;\n  }\n\n  // revalidate when manually revalidating via useRevalidator\n  if (currentUrl.toString() === nextUrl.toString()) {\n    return true;\n  }\n\n  return false;\n};\n\nexport function links() {\n  return [\n  { rel: 'stylesheet', href: tailwindCss },\n  { rel: 'stylesheet', href: resetStyles },\n  { rel: 'stylesheet', href: appStyles },\n  {\n    rel: 'preconnect',\n    href: 'https://cdn.shopify.com'\n  },\n  {\n    rel: 'preconnect',\n    href: 'https://shop.app'\n  },\n  { rel: 'icon', type: 'image/svg+xml', href: favicon }];\n\n}\n\nexport async function loader({ context }) {\n  const { storefront, session, cart } = context;\n  const customerAccessToken = await session.get('customerAccessToken');\n  const publicStoreDomain = context.env.PUBLIC_STORE_DOMAIN;\n\n  // validate the customer access token is valid\n  const { isLoggedIn, headers } = await validateCustomerAccessToken(\n    session,\n    customerAccessToken\n  );\n\n  // defer the cart query by not awaiting it\n  const cartPromise = cart.get();\n\n  // defer the footer query (below the fold)\n  const footerPromise = storefront.query(FOOTER_QUERY, {\n    cache: storefront.CacheLong(),\n    variables: {\n      footerMenuHandle: 'footer' // Adjust to your footer menu handle\n    }\n  });\n\n  // await the header query (above the fold)\n  const headerPromise = storefront.query(HEADER_QUERY, {\n    cache: storefront.CacheLong(),\n    variables: {\n      headerMenuHandle: 'main-menu' // Adjust to your header menu handle\n    }\n  });\n\n  return defer(\n    {\n      cart: cartPromise,\n      footer: footerPromise,\n      header: await headerPromise,\n      isLoggedIn,\n      publicStoreDomain\n    },\n    { headers }\n  );\n}\n\nexport default function App() {\n  const nonce = useNonce();\n  const data = useLoaderData();\n\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" />\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <Layout {...data}>\n          <Outlet />\n        </Layout>\n        <ScrollRestoration nonce={nonce} />\n        <Scripts nonce={nonce} />\n        <LiveReload nonce={nonce} />\n      </body>\n    </html>);\n\n}\n\nexport function ErrorBoundary() {\n  const error = useRouteError();\n  const [root] = useMatches();\n  const nonce = useNonce();\n  let errorMessage = 'Unknown error';\n  let errorStatus = 500;\n\n  if (isRouteErrorResponse(error)) {\n    errorMessage = error?.data?.message ?? error.data;\n    errorStatus = error.status;\n  } else if (error instanceof Error) {\n    errorMessage = error.message;\n  }\n\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" />\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <Layout {...root.data}>\n          <div className=\"route-error\">\n            <h1>Oops</h1>\n            <h2>{errorStatus}</h2>\n            {errorMessage &&\n            <fieldset>\n                <pre>{errorMessage}</pre>\n              </fieldset>}\n\n          </div>\n        </Layout>\n        <ScrollRestoration nonce={nonce} />\n        <Scripts nonce={nonce} />\n        <LiveReload nonce={nonce} />\n      </body>\n    </html>);\n\n}\n\n/**\n * Validates the customer access token and returns a boolean and headers\n * @see https://shopify.dev/docs/api/storefront/latest/objects/CustomerAccessToken\n *\n * @example\n * ```ts\n * //\n * const {isLoggedIn, headers} = await validateCustomerAccessToken(\n *  customerAccessToken,\n *  session,\n *  );\n *  ```\n *  */\nasync function validateCustomerAccessToken(session, customerAccessToken) {\n  let isLoggedIn = false;\n  const headers = new Headers();\n  if (!customerAccessToken?.accessToken || !customerAccessToken?.expiresAt) {\n    return { isLoggedIn, headers };\n  }\n\n  const expiresAt = new Date(customerAccessToken.expiresAt).getTime();\n  const dateNow = Date.now();\n  const customerAccessTokenExpired = expiresAt < dateNow;\n\n  if (customerAccessTokenExpired) {\n    session.unset('customerAccessToken');\n    headers.append('Set-Cookie', await session.commit());\n  } else {\n    isLoggedIn = true;\n  }\n\n  return { isLoggedIn, headers };\n}\n\nconst MENU_FRAGMENT = `#graphql\n  fragment MenuItem on MenuItem {\n    id\n    resourceId\n    tags\n    title\n    type\n    url\n  }\n  fragment ChildMenuItem on MenuItem {\n    ...MenuItem\n  }\n  fragment ParentMenuItem on MenuItem {\n    ...MenuItem\n    items {\n      ...ChildMenuItem\n    }\n  }\n  fragment Menu on Menu {\n    id\n    items {\n      ...ParentMenuItem\n    }\n  }\n`;\n\nconst HEADER_QUERY = `#graphql\n  fragment Shop on Shop {\n    id\n    name\n    description\n    primaryDomain {\n      url\n    }\n    brand {\n      logo {\n        image {\n          url\n        }\n      }\n    }\n  }\n  query Header(\n    $country: CountryCode\n    $headerMenuHandle: String!\n    $language: LanguageCode\n  ) @inContext(language: $language, country: $country) {\n    shop {\n      ...Shop\n    }\n    menu(handle: $headerMenuHandle) {\n      ...Menu\n    }\n  }\n  ${MENU_FRAGMENT}\n`;\n\nconst FOOTER_QUERY = `#graphql\n  query Footer(\n    $country: CountryCode\n    $footerMenuHandle: String!\n    $language: LanguageCode\n  ) @inContext(language: $language, country: $country) {\n    menu(handle: $footerMenuHandle) {\n      ...Menu\n    }\n  }\n  ${MENU_FRAGMENT}\n`;"],
  "mappings": "geACA,IAAAA,EAAuB,OAYnB,IAAAC,EAAA,OAFG,SAASC,EAAO,CAAC,KAAAC,EAAM,SAAAC,EAAW,KAAM,OAAAC,EAAQ,OAAAC,EAAQ,WAAAC,CAAU,EAAG,CAC1E,SACE,mBAKE,mBAAC,QAAM,SAAAH,EAAS,EAMlB,CAEJ,8CC0EM,IAAAI,EAAA,OA/EOC,EAAmB,CAAC,CAAE,WAAAC,EAAY,WAAAC,EAAY,QAAAC,CAAQ,IAE7D,GAAAF,GAAcA,IAAe,OAK7BC,EAAW,SAAS,IAAMC,EAAQ,SAAS,GAO1C,SAASC,GAAQ,CACtB,MAAO,CACP,CAAE,IAAK,aAAc,KAAMC,CAAY,EACvC,CAAE,IAAK,aAAc,KAAMC,CAAY,EACvC,CAAE,IAAK,aAAc,KAAMC,CAAU,EACrC,CACE,IAAK,aACL,KAAM,yBACR,EACA,CACE,IAAK,aACL,KAAM,kBACR,EACA,CAAE,IAAK,OAAQ,KAAM,gBAAiB,KAAMC,CAAQ,CAAC,CAEvD,CA4Ce,SAARC,GAAuB,CAC5B,IAAMC,EAAQC,EAAS,EACjBC,EAAOC,EAAc,EAE3B,SACE,QAAC,QAAK,KAAK,KACT,qBAAC,QACC,oBAAC,QAAK,QAAQ,QAAQ,KACtB,OAAC,QAAK,KAAK,WAAW,QAAQ,qCAAqC,KACnE,OAACC,EAAA,EAAK,KACN,OAACC,EAAA,EAAM,GACT,KACA,QAAC,QACC,oBAACC,EAAA,CAAQ,GAAGJ,EACV,mBAACK,EAAA,EAAO,EACV,KACA,OAACC,EAAA,CAAkB,MAAOR,EAAO,KACjC,OAACS,EAAA,CAAQ,MAAOT,EAAO,KACvB,OAACU,EAAA,CAAW,MAAOV,EAAO,GAC5B,GACF,CAEJ,CAEO,SAASW,GAAgB,CAC9B,IAAMC,EAAQC,EAAc,EACtB,CAACC,CAAI,EAAIC,EAAW,EACpBf,EAAQC,EAAS,EACnBe,EAAe,gBACfC,EAAc,IAElB,OAAIC,EAAqBN,CAAK,GAC5BI,EAAeJ,GAAO,MAAM,SAAWA,EAAM,KAC7CK,EAAcL,EAAM,QACXA,aAAiB,QAC1BI,EAAeJ,EAAM,YAIrB,QAAC,QAAK,KAAK,KACT,qBAAC,QACC,oBAAC,QAAK,QAAQ,QAAQ,KACtB,OAAC,QAAK,KAAK,WAAW,QAAQ,qCAAqC,KACnE,OAACR,EAAA,EAAK,KACN,OAACC,EAAA,EAAM,GACT,KACA,QAAC,QACC,oBAACC,EAAA,CAAQ,GAAGQ,EAAK,KACf,oBAAC,OAAI,UAAU,cACb,oBAAC,MAAG,gBAAI,KACR,OAAC,MAAI,SAAAG,EAAY,EAChBD,MACD,OAAC,YACG,mBAAC,OAAK,SAAAA,EAAa,EACrB,GAEJ,EACF,KACA,OAACR,EAAA,CAAkB,MAAOR,EAAO,KACjC,OAACS,EAAA,CAAQ,MAAOT,EAAO,KACvB,OAACU,EAAA,CAAW,MAAOV,EAAO,GAC5B,GACF,CAEJ,CAoCA,IAAMmB,EAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA0BhBC,EAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA4BjBD;AAAA,EAGEE,EAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUjBF;",
  "names": ["import_react", "import_jsx_runtime", "Layout", "cart", "children", "footer", "header", "isLoggedIn", "import_jsx_runtime", "shouldRevalidate", "formMethod", "currentUrl", "nextUrl", "links", "tailwind_default", "reset_default", "app_default", "favicon_default", "App", "nonce", "ge", "data", "useLoaderData", "Meta", "Links", "Layout", "Outlet", "ScrollRestoration", "Scripts", "LiveReload", "ErrorBoundary", "error", "useRouteError", "root", "useMatches", "errorMessage", "errorStatus", "isRouteErrorResponse", "MENU_FRAGMENT", "HEADER_QUERY", "FOOTER_QUERY"]
}
